% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{SPLITT::Tree::SetBranchLengths}
\alias{SPLITT::Tree::SetBranchLengths}
\title{Set new branch lengths to selected or all branches in a tree.}
\arguments{
\item{nodes_branch_ends}{\href{http://en.cppreference.com/w/cpp/container/vector}{\code{std::vector}}\code{<\link[=SPLITT::Tree::NodeType]{NodeType}> const&}: 
a const reference to a new vector of branch lengths, in the order of the 
nodes in \code{nodes_branch_ends}.}

\item{lengths}{\href{http://en.cppreference.com/w/cpp/container/vector}{\code{std::vector}}\code{<\link[=SPLITT::Tree::LengthType]{LengthType}> const&}: 
\describe{
\item{For overwrite 1.}{a const reference to a new vector of branch lengths, 
in the order of the nodes in \code{nodes_branch_ends};} 
\item{For overwrite 2.}{a const reference to a new vector of branch lengths, 
in the order of the end-node ids. In this case (2.), the vector should be of 
length M-1, where M is the number of nodes in the tree.}
}}
}
\value{
\code{void}
}
\description{
This method has two overwrites:
\describe{
\item{1. Set the lengths of the branches in the order given by their application-specific end-nodes:}{
\code{void SetBranchLengths(}
\href{http://en.cppreference.com/w/cpp/container/vector}{\code{std::vector}}\code{<\link[=SPLITT::Tree::NodeType]{NodeType}> const& nodes_branch_ends,} 
\href{http://en.cppreference.com/w/cpp/container/vector}{\code{std::vector}}\code{<\link[=SPLITT::Tree::LengthType]{LengthType}> const& lengths);}
}
\item{2. Set a new internally stored vector of branch lengths:}{
\code{void SetBranchLengths(}
\href{http://en.cppreference.com/w/cpp/container/vector}{\code{std::vector}}\code{<\link[=SPLITT::Tree::LengthType]{LengthType}> const& lengths);}
}
}


If the tree has no branch lengths, the supplied arguments should
  be of length M-1, where M is the total number of nodes in the tree (-1, 
  because there is no branch leading to the root).
}
\seealso{
\code{\link[=SPLITT::Tree]{Tree}}

\link{SPLITT}

Other public methods in SPLITT::Tree: \code{\link{SPLITT::Tree::BranchLengths}},
  \code{\link{SPLITT::Tree::FindChildren}},
  \code{\link{SPLITT::Tree::FindIdOfNode}},
  \code{\link{SPLITT::Tree::FindIdOfParent}},
  \code{\link{SPLITT::Tree::FindNodeWithId}},
  \code{\link{SPLITT::Tree::HasBranchLengths}},
  \code{\link{SPLITT::Tree::LengthOfBranch}},
  \code{\link{SPLITT::Tree::OrderNodesPosType}},
  \code{\link{SPLITT::Tree::OrderNodes}},
  \code{\link{SPLITT::Tree::SetLengthOfBranch}},
  \code{\link{SPLITT::Tree::Tree}},
  \code{\link{SPLITT::Tree::num_nodes}},
  \code{\link{SPLITT::Tree::num_tips}}
}
\concept{public methods in SPLITT::Tree}
